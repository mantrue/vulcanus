package main

import (
	"bytes"
	"fmt"
	"go/format"

	"github.com/pkg/errors"
	"golang.org/x/tools/go/packages"
)

type Generator struct {
	buf bytes.Buffer

	pkg *packages.Package
}

// echo to buff
func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// load golang package
// force to local current pkg
func (g *Generator) LoadPkg() error {

	cfg := &packages.Config{
		Mode:  packages.LoadSyntax,
		Tests: false,
	}
	pkgs, err := packages.Load(cfg, ".")
	if err != nil {
		return errors.WithMessage(err, "load pkg")
	}

	if len(pkgs) != 1 {
		return errors.WithMessagef(err, "there is %v golang pkg", len(pkgs))
	}

	g.pkg = pkgs[0]
	return nil
}

// work like go fmt ${GOFILE}
func (g *Generator) format() error {

	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		return errors.WithMessage(err, "format source")
	}
	g.buf = *bytes.NewBuffer(src)

	return nil
}

func (g *Generator) generateTitle() {
	g.Printf("// Code generated by \"code-gen \"; DO NOT EDIT.\n")
	g.Printf("\n")
	g.Printf("package %s", g.pkg.Name)
	g.Printf("\n")
	g.Printf("import \"strconv\"\n") // Used by all methods.
}
